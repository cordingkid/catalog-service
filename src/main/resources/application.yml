## ? ?? ?? ?? ##
server:
  port: 9001
  # 우아한 종료 활성화
  shutdown: graceful
  tomcat: # ??? ?? ?? ?? ??
    connection-timeout: 2s
    keep-alive-timeout: 15s # ??? ???? ?? ??? ???? ??
    threads:
      max: 50
      min-spare: 5

spring:
  application:
    name: catalog-service
  lifecycle:
    # 15초의 종료 기간을 둔다
    timeout-per-shutdown-phase: 15s
  config:
    import: "optional:configserver:" # 컨피그 서버에서 설정 데이터 가져온다.
  cloud:
    config:
      uri: http://localhost:8888
      request-connect-timeout: 5000 # 설정 서버에 연결 까지의 시간 (밀리초)
      request-read-timeout: 5000 # 설정 서버에 데이터를 읽기 까지 시간 (밀리초)
      fail-fast: false # 설정 서버 연결 실패를 오류로 인식
      retry:
        max-attempts: 6 # 재시도 최대 횟수
        initial-interval: 1000 # 최초 재시도 지연 시간 (밀리초)
        max-interval: 2000 # 재시도 지연 최대 시간
        multiplier: 1.1 # 지연 시간 계산 승수
  datasource:
    username: user
    password: password
    url: jdbc:postgresql://localhost:5432/polardb_catalog
    hikari:
      connection-timeout: 2000 # 플 연결 객체를 얻기위해 기다려야하는 최대 시간
      maximum-pool-size: 5 # 히카리 CP가 풀에 최대한으로 유지할 수 있는 연결 객체수
  jpa:
    hibernate:
      ddl-auto: validate #validate
  security:
    oauth2:
      resourceserver:
        jwt:                                                      # 엑세스 토큰에 대한 데이터 형식 명시
          issuer-uri: http://localhost:8080/realms/PolarBookshop  # Oauth2 엔드포인트에 대한 정보를 제공하는 키클로 URL

management:
  endpoints:
    web:
      exposure:
        include: refresh # HTTP를 통해 /actuator/refresh 엔드포인트를 노출한다.

polar:
  greeting: Welcome to the local book catalog!