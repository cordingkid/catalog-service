# 워크플로 이름 #
name: Commit stage

# 새 코드를 저장소로 푸시하면 워크플로를 시작한다. #
on: push

# 깃허브 컨테이너 저장소 사용
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: cordingkid/catalog-service
  VERSION: latest

jobs:
  build:
    name: Build and Test # 작업의 인간 친화적 명칭?
    runs-on: ubuntu-22.04 # 작업이 실행될 머신의 유형
    permissions: # 작업에 부여된 권한
      contents: read # 현재 깃 저장소를 체크 아웃할 수 있는 권한
      security-events: write # 깃허브에 보안 이벤트를 제출할 수 있는 권한
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3
      - name: Set up JDK # 자바 런타임을 설치 설정
        uses: actions/setup-java@v3
        with: # 사용할 버전, 배포, 캐시 유형 정의
          distribution: temurin
          java-version: 17
          cache: gradle
      - name: Code vulnerability scanning
        uses: anchore/scan-action@v3 # 그라이프를 사용해 취약성 스캔한다.
        id: scan # 현재 단계의 식별자를 할당하고 이후의 단계에서 참고할 수 있다.
        with:
          path: "${{ github.workspace }}" #체크아웃 저장소 패스
          fail-build: false # 보안 취약성 발견시 빌드 실패 여부
          severity-cutoff: high # 오류로 간주할 최소 수준의 보안 유형
          acs-report-enable: true # 스캔이 완료된 이후에 리포트를 생성할지 여부
      - name: Upload vulnerability report
        uses: github/codeql-action/upload-sarif@v2 # 깃허브로 보안 취약성 리포트 전송
        if: success() || failure() # 이전 단계가 실패하더라도 리포트 전송
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }} # 이전 단계의 결과의 리포트를 가져온다.
      - name: Build, unit tests and integration tests
        run: |
          chmod +x gradlew
          ./gradlew build
      - name: Setup tools
        uses: alexellis/setup-arkade@v3
      - name: Install tools
        uses: alexellis/arkade-get@master
        with:
          kubeconform: latest
      - name: Validate Kubernetes manifests
        run: |
          kustomize build k8s | kubeconform --strict -
  package:
    name: Package and Publish
    # 잡을 main 브랜치에 대해서만 실행
    if: ${{ github.ref == 'refs/heads/main' }}
    # build 잡이 성공적으로 수행된 경우에만 실행
    needs: [ build ]
    runs-on: ubuntu-22.04
    permissions:
      contents: read # 현재 깃 저장소를 체크아웃하기 위한 권한
      packages: write # 깃허브 컨테이너 저장소로 이미지를 업로드하기 위한 권한
      security-events: write # 깃허브로 보안 이벤트를 제출하기 위한 권한
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17
          cache: gradle
      - name: Build container image
        run: |
          chmod +x gradlew
          ./gradlew bootBuildImage \
            --imageName ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
      - name: OCI image vulnerability scanning
        uses: anchore/scan-action@v3 # 그라이프를 사용해 릴리스 후보 이미지 스캔
        id: scan
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
          fail-build: false
          severity-cutoff: high
          acs-report-enable: true
      - name: Upload vulnerability report
        # 깃허브 보안 취약성 리포트 업로드 SARIF 형식
        uses: github/codeql-action/upload-sarif@v2
        if: success() || failure()
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}
      - name: Log into container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Publish container image
        run: docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}